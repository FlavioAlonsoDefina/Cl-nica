/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clinica;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author DELL7050
 */
public class PacienteUI extends javax.swing.JFrame {

    /**
     * Creates new form PacienteUI
     */
    public PacienteUI() {
        initComponents();
        String dni = JOptionPane.showInputDialog(this, "Ingresa tu DNI:");
        Paciente paciente = BaseDatos.buscarPorDNI(dni);

        if (paciente == null) {
            JOptionPane.showMessageDialog(this, "No estás registrado.");
            dispose();
            new MenuPrincipalUI();
            return;
        }

        setTitle("Bienvenido, " + paciente.getNombre());
        setSize(400, 300);
        setLocationRelativeTo(null);
        setLayout(null);

        JButton btnHistorial = new JButton("Ver Historial Médico");
        btnHistorial.setBounds(100, 100, 200, 30);
        add(btnHistorial);

        btnHistorial.addActionListener(e -> {
            StringBuilder historial = new StringBuilder("Tu historial médico:\n\n");

            boolean encontrado = false;
            for (Consulta c : BaseDatos.consultas) {
                if (c.getPaciente().getDni().equals(dni)) {
                    historial.append(c.resumen()).append("\n\n");
                    encontrado = true;
                }
            }

            if (!encontrado) {
                historial.append("No tienes consultas registradas.");
            }

            JOptionPane.showMessageDialog(this, historial.toString());
        });
        
        JButton btnCalificar = new JButton("Calificar una Consulta");
        btnCalificar.setBounds(100, 150, 200, 30);
        add(btnCalificar);

        btnCalificar.addActionListener(e -> calificarConsulta(dni));
        
        JButton btnVolver = new JButton("Volver al Menú");
        btnVolver.setBounds(100, 200, 200, 30);
        add(btnVolver);

        btnVolver.addActionListener(e -> {
            dispose(); // Cierra esta ventana
            new MenuPrincipalUI(); // Abre el menú principal
        });

        setVisible(true);
    }
    private void calificarConsulta(String dni) {
    List<Consulta> consultasPaciente = new ArrayList<>();
    for (Consulta c : BaseDatos.consultas) {
        if (c.getPaciente().getDni().equals(dni)) {
            consultasPaciente.add(c);
        }
    }

    if (consultasPaciente.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No tienes consultas para calificar.");
        return;
    }

    // Mostrar lista simple con índices
    String[] opciones = new String[consultasPaciente.size()];
    for (int i = 0; i < opciones.length; i++) {
        Consulta c = consultasPaciente.get(i);
        opciones[i] = "Consulta con Dr. " + c.getDoctor() + " - " + c.getFechaHora().toLocalDate();
    }

    String seleccion = (String) JOptionPane.showInputDialog(
        this,
        "Selecciona la consulta a calificar:",
        "Calificar",
        JOptionPane.QUESTION_MESSAGE,
        null,
        opciones,
        opciones[0]
    );

    if (seleccion == null) return; // Cancelado

    int indiceSeleccionado = Arrays.asList(opciones).indexOf(seleccion);
    Consulta consultaSeleccionada = consultasPaciente.get(indiceSeleccionado);

    String nota = JOptionPane.showInputDialog(this, "Ingresa tu calificación (1 a 5):");
    try {
        int calificacion = Integer.parseInt(nota);
            if (calificacion < 1 || calificacion > 5) throw new NumberFormatException();
                consultaSeleccionada.setCalificacion(calificacion);
                JOptionPane.showMessageDialog(this, "¡Gracias por calificar!");
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "La calificación debe ser un número entre 1 y 5.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PacienteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PacienteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PacienteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PacienteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PacienteUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
